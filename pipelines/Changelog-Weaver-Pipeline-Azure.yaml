# azure-pipelines.yml
trigger:
  branches:
    include:
      - main

pool:
  vmImage: "ubuntu-latest"

variables:
  # The name of the solution or repository. (String)
  SOLUTION_NAME:
  # The version of the release. (String)
  RELEASE_VERSION:
  # A summary of the software changes or updates. (String)
  SOFTWARE_SUMMARY:
  # A flag indicating whether to get the item summary. (True/False)
  GET_ITEM_SUMMARY: True
  # A flag indicating whether to get the changelog summary. (True/False)
  GET_CHANGELOG_SUMMARY: True
  # The url of the project. (String) e.g. https://dev.azure.com/ORGANISATION_NAME/PROJECT_NAME
  PROJECT_URL:
  # The query used to filter work items for the release. (String) e.g. 38ec490b-21e2-4eba-af3f-41ebcf231c47
  QUERY:
  # The Personal Access Token (PAT) for accessing Azure DevOps APIs. (String)
  ACCESS_TOKEN:
  # The API key for accessing the GPT API. (String) (stored as a secret) DO NOT MODIFY THE BELOW OR ENTER YOUR API KEY HERE.
  GPT_API_KEY: $(Model API Key)
  # The base URL for the GPT API. (String) e.g. https://api.openai.com/v1
  MODEL_BASE_URL: https://api.openai.com/v1
  # The GPT model to use for generating release notes. (String) e.g. gpt-4o-mini check https://platform.openai.com/docs/models for more models
  MODEL: gpt-4o-mini
  # The folder where the release notes will be generated.
  OUTPUT_FOLDER: Releases
  # The logging level for the application.
  LOG_LEVEL: INFO

parameters:
  - name: majorVersion
    type: string
    default: "1"
    displayName: "Major Version"
  - name: minorVersion
    type: string
    default: "0"
    displayName: "Minor Version"
  - name: outputFolder
    type: string
    default: "Releases"
    displayName: "Output Folder Name"
  - name: desiredWorkItemTypes
    type: string
    default: "Bug,User Story,Task"
    displayName: "Desired Work Item Types"
  - name: commitBranch
    type: string
    default: "main"
    displayName: "Target Repo Branch"
  - name: model
    type: string
    default: "gpt-4o"
    displayName: "AI Model"
  - name: modelBaseUrl
    type: string
    default: "https://api.openai.com/v1"
    displayName: "AI Model Base URL"

steps:
  - checkout: self
    persistCredentials: true
    fetchDepth: 1
    path: target-repo

  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.x"
      addToPath: true

  - script: |
      git clone --branch main https://github.com/hankanman/Auto-Release-Notes.git script-repo
    displayName: "Clone GitHub Repository"

  - script: |
      cd script-repo
      python -m venv .venv
      source .venv/bin/activate
      pip install -r requirements.txt
    displayName: "Set up Python environment"

  - script: |
      cd script-repo
      cat <<EOF > .env
      SOLUTION_NAME="$SOLUTION_NAME"
      RELEASE_VERSION="$RELEASE_VERSION"
      SOFTWARE_SUMMARY="$SOFTWARE_SUMMARY"
      GET_ITEM_SUMMARY="$GET_ITEM_SUMMARY"
      GET_CHANGELOG_SUMMARY="$GET_CHANGELOG_SUMMARY"
      PROJECT_URL="$PROJECT_URL"
      QUERY="$QUERY"
      ACCESS_TOKEN="$ACCESS_TOKEN"
      GPT_API_KEY=$GPT_API_KEY
      MODEL_BASE_URL="$MODEL_BASE_URL"
      MODEL="$MODEL"
      OUTPUT_FOLDER="$OUTPUT_FOLDER"
      LOG_LEVEL="$LOG_LEVEL"
      EOF
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      GPT_API_KEY: $(Model API Key)
    displayName: "Create .env file"

  - script: |
      cd script-repo
      source .venv/bin/activate
      python -m changelog_weaver
    displayName: "Run release notes script"

  - script: |
      mkdir -p "${{parameters.outputFolder}}"
      cp -r "script-repo/${{parameters.outputFolder}}/"* "${{parameters.outputFolder}}/"
      cd target-repo
      git config --global user.email "$(Build.RequestedForEmail)"
      git config --global user.name "$(Build.RequestedFor)"
      git checkout -b ${{parameters.commitBranch}} || git checkout ${{parameters.commitBranch}}
      git add "${{parameters.outputFolder}}/*"
      git commit -m "Add release notes for version ${{parameters.majorVersion}}.${{parameters.minorVersion}}.$(date '+%Y%m%d').1"
      git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin ${{parameters.commitBranch}}
    displayName: "Commit and push release notes"
