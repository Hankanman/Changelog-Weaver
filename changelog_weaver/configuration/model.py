""" This module contains the Model class for the GPT model."""

import re

# Third party imports
import openai

from ..typings import ApiDetails

from ..logger import get_logger

log = get_logger(__name__)


class Model:
    """
    Configuration class for the GPT model.

    Attributes:
        api_key (str): The API key for the GPT model.
        url (str): The base URL for the GPT model.
        model_name (str): The name of the GPT model.
        model (str): The name of the GPT model.
        models (List[Dict[str, Any]]): A list of available GPT models.
    """

    item_summary: bool = True
    changelog_summary: bool = True

    def __init__(
        self,
        api_details: ApiDetails,
        item_summary: bool = True,
        changelog_summary: bool = True,
    ):
        self.client = openai.OpenAI(api_key=api_details.key)
        self.api_details = api_details
        self.item_summary = item_summary
        self.changelog_summary = changelog_summary
        log.info("Model initialized: %s", self.api_details.model_name)
        if self.authenticate():
            log.info("Model authenticated successfully")
        else:
            log.error("Model authentication failed")

    async def summarise(self, prompt: str) -> str:
        """
        Sends a prompt to GPT and returns the response.

        Parameters:
            prompt (str): The input prompt for GPT.

        Returns:
            str: The response generated by GPT.
        """

        return await self._openai_request(prompt)

    def authenticate(self):
        """
        Authenticates the GPT model with the given API key.

        Returns:
            bool: True if the authentication is successful, False otherwise.
        """
        try:
            self.client.chat.completions.create(
                model=self.api_details.model_name,
                messages=[{"role": "user", "content": "Hello"}],
                stream=False,
                logprobs=False,
            )
            return True
        except openai.APIError as e:
            log.error("OpenAI Error: %s", str(e))
            return False

    async def _openai_request(self, prompt: str) -> str:
        try:
            response = self.client.chat.completions.create(
                model=self.api_details.model_name,
                messages=[{"role": "user", "content": prompt}],
                stream=False,
                logprobs=False,
            )
            return str(response.choices[0].message.content)
        except openai.APIError as e:
            log.error("OpenAI Error: %s", str(e))
            return f"Error: {str(e)}"

    def count_tokens(self, text: str) -> int:
        """
        Calculates the token count for a given text.

        Parameters:
        text (str): The input text for which the token count needs to be calculated.

        Returns:
        int: The total count of tokens in the given text.
        """
        word_count = len(re.findall(r"\b\w+\b", text))
        char_count = len(re.sub(r"\s", "", text))
        return word_count + char_count
